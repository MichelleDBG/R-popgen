# edit(prabinit)

# testing
#	prabmatrix <- mcona
#	distance <- "veg"
#	rows.are.species <- TRUE
#	nbbetweenregions <- "TRUE"
#	nb <- numeric(0)
#	toprab <- "FALSE"
#	toprabp <- 0.05
#	outc <- 5.2
#	neighborhood <- "none"
#rm(prabmatrix)
#rm(distance )
#rm(rows.are.species)
#rm(nbbetweenregions)
#rm(nb)
#rm(toprab)
#rm(toprabp)
#rm(outc)


prabinitmedl <- function (file = NULL, prabmatrix = NULL, rows.are.species = TRUE, 
    neighborhood = "none", nbbetweenregions = TRUE, geodist = NULL, 
    gtf = 0.1, distance = "kulczynski", toprab = FALSE, toprabp = 0.05, 
    outc = 5.2) 
{
    if (is.null(prabmatrix)) 
        m1 <- as.matrix(read.table(file))
    else m1 <- as.matrix(prabmatrix)
    if (rows.are.species)
	  m1 <- m1 
			    #        m1 <- t(m1)
			    #    regperspec <- apply(m1, 2, sum)
    regperspec <- apply(m1, 2, function(x) sum(x, na.rm = TRUE))	# edit
			    #    specperreg <- apply(m1, 1, sum)
    specperreg <- apply(m1, 1, function(x) sum(x, na.rm = TRUE))  # edit
			    # specperreg <- apply(as.matrix(prabmatrix),1, sum, na.rm = TURE) 	#  edit
    nonempty.species <- regperspec > 0
    m1 <- as.matrix(m1[, regperspec > 0])
    regperspec <- regperspec[regperspec > 0]
    n.species <- ncol(m1)	#same as individuals? when rows.are.species = TRUE
    n.regions <- nrow(m1)	#same as loci??
    nb <- list()
    if (nbbetweenregions) 
        nreg <- n.regions		# This needs to be loci 
    else nreg <- n.species		# This needs to be individuals
    if (is.list(neighborhood)) 
        nb <- neighborhood
    else {
        if (identical(neighborhood, "none")) 
            for (i in 1:nreg) nb[[i]] <- numeric(0)
        else for (i in 1:nreg) nb <- c(nb, list(scan(file = neighborhood, 
            skip = i - 1, nlines = 1, quiet = TRUE)))
    }
    nbtest(nb, nreg)
    if (toprab) {			# produces many NA but may not be needed in prabclust??
        nscut <- toprabp * specperreg
        minno <- c()
        for (i in 1:n.species) {
            g0 <- log(m1[, i][m1[, i] > 0])
            minno[i] <- median(g0) - mad(g0, constant = outc)
        }
        for (i in 1:n.regions) for (j in 1:n.species) m1[i, j] <- as.integer(m1[i,
            j] > nscut[i] | log(m1[i, j]) > minno[j])
        regperspec <- apply(m1, 2, sum)
        specperreg <- apply(m1, 1, sum)
	 # specperreg <- apply(as.matrix(prabmatrix), 1, sum, na.rm = TRUE)	#  edit
    }
    distmat <- switch(distance, kulczynski = kulczynski(m1), 
	  veg = vegdist(m1, method = "jaccard", na.rm = T),	# edit, can't use binary = T???
        jaccard = jaccard(m1), geco = geco(m1, geodist, tf = gtf), 
        qkulczynski = qkulczynski(m1), logkulczynski = qkulczynski(m1, 
            log.distance = TRUE), dice = dicedist(m1), none = NULL)
    if (identical(levels(as.factor(m1)), c("0", "1"))) {
        prabm <- as.matrix(as.logical(m1))
        dim(prabm) <- dim(m1)
        m1 <- prabm
    }
    out <- list(distmat = matrix(distmat, n.species, n.species),	# edit, was distmat = distmat
			 prab = m1, 
			# prabobj = m1,	#Michelle edit
	  nb = nb, regperspec = regperspec, 
        specperreg = specperreg, n.species = n.species, n.regions = n.regions, 
        distance = distance, geodist = geodist, gtf = gtf, spatial = (!identical(neighborhood, 
            "none")), nonempty.species = nonempty.species, nbbetweenregions = nbbetweenregions)
    class(out) <- "prab"
    out
}



